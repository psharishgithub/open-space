generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String        @id @default(uuid())
  googleId          String        @unique
  name              String
  bio               String?
  email             String        @unique
  githubUsername    String?       @unique
  githubProfileUrl  String?
  githubAvatarUrl   String?
  role              UserRole      @default(INDIVIDUAL)
  joinDate          DateTime      @default(now())
  githubAccessToken String?
  points            Int           @default(0)
  techStack         String[]      @default([])
  projectTags       ProjectTag[]
  projects          ProjectUser[]
}

model Counter {
  id    String @id @default("project_counter")
  count Int    @default(0)
}

model Project {
  id               String   @id 
  name             String
  description      String?
  problemStatement String?
  githubUrl        String?  @unique
  demoUrl          String?
  techStack        String[]
  imageUrl         String?
  status           String
  projectType      String
  department       String?
  club             String?
  keyFeatures      String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  pendingUsers     PendingProjectUser[]
  projectImages    ProjectImage[]
  resources        ProjectResource[]
  tags             ProjectTag[]
  users            ProjectUser[]
  votes            Vote[]
}

model ProjectTag {
  id          String            @id @default(uuid())
  name        String
  title       String?
  status      ProjectTagStatus?
  conference  String?
  date        DateTime?
  competition String?
  projectId   String
  curatorId   String
  createdAt   DateTime          @default(now())
  curator     User              @relation(fields: [curatorId], references: [id])
  project     Project           @relation(fields: [projectId], references: [id])

  @@unique([projectId, name])
  @@index([curatorId])
}

model ProjectUser {
  id        String  @id @default(uuid())
  userId    String
  projectId String
  role      String
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model PendingProjectUser {
  id             String  @id @default(uuid())
  githubUsername String
  projectId      String
  role           String
  project        Project @relation(fields: [projectId], references: [id])

  @@unique([githubUsername, projectId])
}

model ProjectImage {
  id          String   @id @default(uuid())
  title       String
  description String
  url         String
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model ProjectResource {
  id          String   @id @default(uuid())
  title       String
  description String
  url         String
  type        String
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Vote {
  id        String   @id @default(cuid())
  projectId String
  userEmail String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([projectId, userEmail])
}

model VotingStatus {
  id        String    @id @default("voting_status")
  isOpen    Boolean   @default(false)
  startTime DateTime?
  endTime   DateTime?
  updatedAt DateTime  @updatedAt
}

enum UserRole {
  INDIVIDUAL
  ADMIN
  CURATOR
}

enum ProjectTagStatus {
  PUBLISHED
  IN_REVIEW
  DRAFT
  COMPLETED
  ONGOING
}
